{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Saturn'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n",
    "\n",
    "# mercury\n",
    "planets[0]\n",
    "\n",
    "# venus\n",
    "planets[1]\n",
    "\n",
    "#neptune\n",
    "planets[-1]\n",
    "\n",
    "#saturn\n",
    "planets[-3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# SLICING\n",
    "\n",
    "planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n",
    "\n",
    "planets[0:4]\n",
    "\n",
    "planets[4:]\n",
    "\n",
    "planets[:4]\n",
    "\n",
    "# all planets except first and last\n",
    "planets[1:-1]\n",
    "\n",
    "# last four planets\n",
    "planets[-4:]\n",
    "\n",
    "planets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Mur', 'Vee', 'Ur', 'Malacandra', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n",
      "['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n"
     ]
    }
   ],
   "source": [
    "# CHANGING LISTS\n",
    "\n",
    "planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n",
    "\n",
    "#change fourth planet\n",
    "planets[3] = 'Malacandra'\n",
    "\n",
    "planets\n",
    "\n",
    "# shorten names of the first 3 planets\n",
    "planets[:3] = ['Mur', 'Vee', 'Ur']\n",
    "\n",
    "print(planets)\n",
    "\n",
    "# give back their old names\n",
    "planets[:4] = ['Mercury', 'Venus', 'Earth', 'Mars']\n",
    "\n",
    "print(planets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# LIST FUNCTIONS\n",
    "\n",
    "#length of list\n",
    "len(planets)\n",
    "\n",
    "# sort strings in alphabetical order\n",
    "sorted(planets)\n",
    "\n",
    "primes = [2, 3, 5, 7]\n",
    "\n",
    "# sum only works with integers\n",
    "# sum all numbers in the list\n",
    "sum(primes)\n",
    "\n",
    "# find max number\n",
    "max(primes)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "3.0\n",
      "459\n",
      "0\n",
      "4.0\n",
      "Help on built-in function bit_length:\n",
      "\n",
      "bit_length() method of builtins.int instance\n",
      "    Number of bits necessary to represent self in binary.\n",
      "    \n",
      "    >>> bin(37)\n",
      "    '0b100101'\n",
      "    >>> (37).bit_length()\n",
      "    6\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# OBJECTS\n",
    "\n",
    "x = 12\n",
    "# x is a real number, so its imaginary part is 0.\n",
    "print(x.imag)\n",
    "# Here's how to make a complex number, in case you've ever been curious:\n",
    "c = 12 + 3j\n",
    "print(c.imag)\n",
    "\n",
    "y = 459\n",
    "print(y)\n",
    "print(y.imag)\n",
    "\n",
    "# how to make a complex number\n",
    "z = 459 + 4j\n",
    "print(z.imag)\n",
    "\n",
    "y.bit_length()\n",
    "\n",
    "help(y.bit_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n",
      "['Earth', 'Jupiter', 'Mars', 'Mercury', 'Neptune', 'Saturn', 'Uranus', 'Venus']\n",
      "['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n",
      "['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus']\n"
     ]
    }
   ],
   "source": [
    "# LIST METHODS\n",
    "planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n",
    "print(planets)\n",
    "\n",
    "#planets\n",
    "#sorted(planets)\n",
    "print(sorted(planets))\n",
    "\n",
    "\n",
    "\n",
    "# add string to end of a list\n",
    "# planets.append('Pluto')\n",
    "planets.append('Pluto')\n",
    "planets\n",
    "\n",
    "#planets.append('Pluto')\n",
    "\n",
    "# remove last five 'Pluto' in the list\n",
    "#del planets[-5:]\n",
    "\n",
    "del planets[-1]\n",
    "print(planets)\n",
    "\n",
    "del planets[-1]\n",
    "print(planets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Uranus'"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "planets\n",
    "\n",
    "# remove and return last element of a list\n",
    "planets.pop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# SEARCHING LISTS\n",
    "\n",
    "planets.index('Earth')\n",
    "\n",
    "#ERROR: planets.index('Uranus')\n",
    "\n",
    "\n",
    "# ask whether Pluto is in planets\n",
    "'Pluto' in planets\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'tuple' object does not support item assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-108-f458a0287d85>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# TUPLES are immutable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mt\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"
     ]
    }
   ],
   "source": [
    "# TUPLES\n",
    "\n",
    "t = (1,2,3)\n",
    "\n",
    "t\n",
    "\n",
    "# TUPLES are immutable\n",
    "t[0] = 100\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.125\n",
      "(1, 8)\n",
      "1\n",
      "8\n",
      "0.125\n"
     ]
    }
   ],
   "source": [
    "# Tuples are used when there are multiple return values\n",
    "\n",
    "x = 0.125\n",
    "print(x)\n",
    "\n",
    "y = x.as_integer_ratio()\n",
    "print(y)\n",
    "\n",
    "# individually assign return values\n",
    "numerator, denominator = x.as_integer_ratio()\n",
    "print(numerator)\n",
    "print(denominator)\n",
    "print(numerator / denominator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "0 1\n"
     ]
    }
   ],
   "source": [
    "# Classic Python Trick for Swapping Two variables\n",
    "\n",
    "a = 1\n",
    "b = 0\n",
    "a, b = b, a\n",
    "print(a)\n",
    "print(b)\n",
    "print(a,b)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
